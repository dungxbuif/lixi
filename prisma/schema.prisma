datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  salt          String?   @db.Text
  accounts      Account[]
  sessions      Session[]
  pwHash        String?

  luckyMoney        LuckyMoney[]     @relation("LuckyMoneyOwner")
  spaceParticipants LuckyMoneyUser[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model LuckyMoney {
  id        Int      @id @default(autoincrement())
  ownerId   String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation("LuckyMoneyOwner", fields: [ownerId], references: [id])

  luckyMoneyCommands LuckyMoneyCommand[]
  users              LuckyMoneyUser[]

  @@map("lucky_moneys")
}

model LuckyMoneyUser {
  id           String   @id @default(uuid())
  luckyMoneyId Int
  userId       String
  joinedAt     DateTime @default(now())
  hasSpinned   Boolean  @default(false)

  luckyMoney LuckyMoney @relation(fields: [luckyMoneyId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@map("lucky_moneys_users")
}

model LuckyMoneyCommand {
  id           String   @id @default(uuid())
  luckyMoneyId Int
  amount       Float
  message      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  luckyMoney LuckyMoney @relation(fields: [luckyMoneyId], references: [id])
}
